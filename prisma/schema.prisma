generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Association {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  logoUrl     String?
  admins      Admin[]
  voters      Voter[]
  elections   Election[]
  positions   Position[] 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Admin {
  id             String      @id @default(uuid())
  email          String      @unique
  passwordHash   String
  role           AdminRole   // SUPERADMIN or ADMIN
  associationId  String
  association    Association @relation(fields: [associationId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum AdminRole {
  SUPERADMIN
  ADMIN
}

model Voter {
  id             String      @id @default(uuid())
  email          String      @unique
  password       String
  first_name     String
  last_name      String
  level          String
  studentId      String
  hasVoted       Boolean     @default(false)
  associationId  String
  association    Association @relation(fields: [associationId], references: [id])
  votes          Vote[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Election {
  id             String      @id @default(uuid())
  title          String
  description    String?
  associationId  String
  association    Association @relation(fields: [associationId], references: [id])
  candidates     Candidate[]
  votes          Vote[]
  startAt        DateTime
  endAt          DateTime
  isActive       Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Position {
  id             String      @id @default(uuid())
  name           String
  description    String?
  order          Int         @default(0)
  maxCandidates  Int         @default(10)
  associationId  String
  association    Association @relation(fields: [associationId], references: [id])
  candidates     Candidate[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([name, associationId]) // Unique position per association
}

model Candidate {
  id           String      @id @default(uuid())
  name         String
  manifesto    String?
  photoUrl     String?     @default("https://images.unsplash.com/photo-1633332755192-727a05c4013d?w=400&h=400&fit=crop&crop=face")
  electionId   String
  election     Election    @relation(fields: [electionId], references: [id])
  positionId   String
  position     Position    @relation(fields: [positionId], references: [id])
  votes        Vote[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([electionId, positionId, name])
}

model Vote {
  id           String      @id @default(uuid())
  voterId      String
  voter        Voter       @relation(fields: [voterId], references: [id], onDelete: Cascade)
  electionId   String
  election     Election    @relation(fields: [electionId], references: [id], onDelete: Cascade)
  candidateId  String
  candidate    Candidate   @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())

  @@unique([voterId, electionId, candidateId])
}
